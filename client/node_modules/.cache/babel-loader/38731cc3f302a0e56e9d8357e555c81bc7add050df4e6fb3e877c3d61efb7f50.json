{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leesa\\\\Desktop\\\\OSSP-vivace\\\\tempo\\\\client\\\\src\\\\components\\\\MainSect\\\\forceGraph.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CardNode(_ref) {\n  _s();\n  let {\n    node,\n    ctx,\n    globalScale\n  } = _ref;\n  const ref = React.useRef(null);\n\n  // set the fixed size of the node\n  const width = 100 / globalScale;\n  const height = 60 / globalScale;\n\n  // draw the card background\n  ctx.fillStyle = \"#fff\";\n  ctx.fillRect(-width / 2, -height / 2, width, height);\n\n  // draw the label and contents\n  const {\n    label,\n    contents\n  } = node;\n  const fontSize = 12 / globalScale;\n  const padding = 4 / globalScale;\n  ctx.font = `${fontSize}px sans-serif`;\n  ctx.textAlign = \"center\";\n  ctx.textBaseline = \"middle\";\n  ctx.fillStyle = \"#000\";\n  ctx.fillText(label, 0, -fontSize / 2 - padding);\n  if (contents) {\n    ctx.fillText(contents, 0, fontSize / 2 + padding);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 12\n  }, this);\n}\n_s(CardNode, \"QMBuJFIdzLIeqBcFwhMf246mjOM=\");\n_c = CardNode;\nfunction MyGraph(_ref2) {\n  let {\n    data\n  } = _ref2;\n  const {\n    nodes,\n    edges\n  } = data;\n\n  // create a map of node IDs to nodes\n  const nodeMap = new Map();\n  nodes.forEach(node => {\n    var _node$id$toString, _node$id;\n    return nodeMap.set((_node$id$toString = (_node$id = node.id) === null || _node$id === void 0 ? void 0 : _node$id.toString()) !== null && _node$id$toString !== void 0 ? _node$id$toString : \"\", node);\n  });\n\n  // create an array of links from the edges\n  const links = edges.reduce((acc, edge) => {\n    const source = nodeMap.get(edge.source);\n    if (!source) return acc;\n    const targets = edge.targets.map(target => nodeMap.get(target)).filter(Boolean);\n    if (targets.length === 0) return acc;\n    return [...acc, ...targets.map(target => ({\n      source,\n      target\n    }))];\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n    graphData: {\n      nodes,\n      links\n    },\n    nodeCanvasObject: (node, ctx, globalScale) => /*#__PURE__*/_jsxDEV(CardNode, {\n      node: node,\n      ctx: ctx,\n      globalScale: globalScale\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n_c2 = MyGraph;\nexport default MyGraph;\nvar _c, _c2;\n$RefreshReg$(_c, \"CardNode\");\n$RefreshReg$(_c2, \"MyGraph\");","map":{"version":3,"names":["React","ForceGraph2D","jsxDEV","_jsxDEV","CardNode","_ref","_s","node","ctx","globalScale","ref","useRef","width","height","fillStyle","fillRect","label","contents","fontSize","padding","font","textAlign","textBaseline","fillText","fileName","_jsxFileName","lineNumber","columnNumber","_c","MyGraph","_ref2","data","nodes","edges","nodeMap","Map","forEach","_node$id$toString","_node$id","set","id","toString","links","reduce","acc","edge","source","get","targets","map","target","filter","Boolean","length","graphData","nodeCanvasObject","_c2","$RefreshReg$"],"sources":["C:/Users/leesa/Desktop/OSSP-vivace/tempo/client/src/components/MainSect/forceGraph.tsx"],"sourcesContent":["import React from \"react\";\r\nimport ForceGraph2D, { LinkObject, NodeObject } from \"react-force-graph-2d\";\r\n\r\ninterface CardNodeProps {\r\n    node: NodeObject;\r\n    ctx: CanvasRenderingContext2D;\r\n    globalScale: number;\r\n}\r\n\r\nfunction CardNode({ node, ctx, globalScale }: CardNodeProps) {\r\n    const ref = React.useRef<HTMLDivElement>(null);\r\n\r\n    // set the fixed size of the node\r\n    const width = 100 / globalScale;\r\n    const height = 60 / globalScale;\r\n\r\n    // draw the card background\r\n    ctx.fillStyle = \"#fff\";\r\n    ctx.fillRect(-width / 2, -height / 2, width, height);\r\n\r\n    // draw the label and contents\r\n    const { label, contents } = node;\r\n    const fontSize = 12 / globalScale;\r\n    const padding = 4 / globalScale;\r\n    ctx.font = `${fontSize}px sans-serif`;\r\n    ctx.textAlign = \"center\";\r\n    ctx.textBaseline = \"middle\";\r\n    ctx.fillStyle = \"#000\";\r\n    ctx.fillText(label, 0, -fontSize / 2 - padding);\r\n    if (contents) {\r\n        ctx.fillText(contents, 0, fontSize / 2 + padding);\r\n    }\r\n\r\n    return <div ref={ref} />;\r\n}\r\n\r\ninterface MyGraphProps {\r\n    data: { nodes: NodeObject[]; edges: { source: string; targets: string[] }[] };\r\n}\r\n\r\nfunction MyGraph({ data }: MyGraphProps) {\r\n    const { nodes, edges } = data;\r\n\r\n    // create a map of node IDs to nodes\r\n    const nodeMap = new Map<string, NodeObject>();\r\n    nodes.forEach((node) => nodeMap.set(node.id?.toString() ?? \"\", node));\r\n\r\n    // create an array of links from the edges\r\n    const links = edges.reduce<LinkObject[]>((acc, edge) => {\r\n        const source = nodeMap.get(edge.source);\r\n        if (!source) return acc;\r\n        const targets = edge.targets.map((target) => nodeMap.get(target)).filter(Boolean);\r\n        if (targets.length === 0) return acc;\r\n        return [...acc, ...targets.map((target) => ({ source, target }))];\r\n    }, []);\r\n\r\n    return (\r\n        <ForceGraph2D\r\n            graphData={{ nodes, links }}\r\n            nodeCanvasObject={(node: NodeObject, ctx: CanvasRenderingContext2D, globalScale: number) => (\r\n                <CardNode node={node} ctx={ctx} globalScale={globalScale} />\r\n            )}\r\n        />\r\n    );\r\n}\r\n\r\nexport default MyGraph;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}