{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leesa\\\\Desktop\\\\OSSP-vivace\\\\tempo\\\\client\\\\src\\\\components\\\\MainSect\\\\Kanban.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport \"./kanban.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialData = {\n  tasks: {\n    \"task-1\": {\n      id: \"task-1\",\n      content: \"Task 1\"\n    },\n    \"task-2\": {\n      id: \"task-2\",\n      content: \"Task 2\"\n    },\n    \"task-3\": {\n      id: \"task-3\",\n      content: \"Task 3\"\n    },\n    \"task-4\": {\n      id: \"task-4\",\n      content: \"Task 4\"\n    }\n  },\n  columns: {\n    \"column-1\": {\n      id: \"column-1\",\n      title: \"To do\",\n      taskIds: [\"task-1\", \"task-2\", \"task-3\", \"task-4\"]\n    },\n    \"column-2\": {\n      id: \"column-2\",\n      title: \"In progress\",\n      taskIds: []\n    },\n    \"column-3\": {\n      id: \"column-3\",\n      title: \"Done\",\n      taskIds: []\n    }\n  },\n  columnOrder: [\"column-1\", \"column-2\", \"column-3\"]\n};\nconst KanbanBoard = () => {\n  _s();\n  const [data, setData] = useState(initialData);\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n    if (!destination) {\n      return;\n    }\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n    const sourceColumn = data.columns[source.droppableId];\n    const destinationColumn = data.columns[destination.droppableId];\n    if (sourceColumn === destinationColumn) {\n      const newTaskIds = Array.from(sourceColumn.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n      const newColumn = {\n        ...sourceColumn,\n        taskIds: newTaskIds\n      };\n      const newData = {\n        ...data,\n        columns: {\n          ...data.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n      setData(newData);\n    } else {\n      const sourceTaskIds = Array.from(sourceColumn.taskIds);\n      sourceTaskIds.splice(source.index, 1);\n      const newSourceColumn = {\n        ...sourceColumn,\n        taskIds: sourceTaskIds\n      };\n      const destinationTaskIds = Array.from(destinationColumn.taskIds);\n      destinationTaskIds.splice(destination.index, 0, draggableId);\n      const newDestinationColumn = {\n        ...destinationColumn,\n        taskIds: destinationTaskIds\n      };\n      const newData = {\n        ...data,\n        columns: {\n          ...data.columns,\n          [newSourceColumn.id]: newSourceColumn,\n          [newDestinationColumn.id]: newDestinationColumn\n        }\n      };\n      setData(newData);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: data.columnOrder.map(columnId => {\n        const column = data.columns[columnId];\n        const tasks = column.taskIds.map(taskId => data.tasks[taskId]);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: column.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n            droppableId: column.id,\n            children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.droppableProps,\n              className: `task-list ${snapshot.isDraggingOver ? \"dragging-over\" : \"\"}`,\n              children: [tasks.map((task, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n                draggableId: task.id,\n                index: index,\n                children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  ref: provided.innerRef,\n                  ...provided.draggableProps,\n                  ...provided.dragHandleProps,\n                  className: `task ${snapshot.isDragging ? \"dragging\" : \"\"}`,\n                  children: task.content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 53\n                }, this)\n              }, task.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 45\n              }, this)), provided.placeholder]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 29\n          }, this)]\n        }, column.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n};\n_s(KanbanBoard, \"hDGcfQHkZj5ZsEBk8saO8jx9VfY=\");\n_c = KanbanBoard;\nexport default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","useState","DragDropContext","Droppable","Draggable","jsxDEV","_jsxDEV","initialData","tasks","id","content","columns","title","taskIds","columnOrder","KanbanBoard","_s","data","setData","onDragEnd","result","destination","source","draggableId","droppableId","index","sourceColumn","destinationColumn","newTaskIds","Array","from","splice","newColumn","newData","sourceTaskIds","newSourceColumn","destinationTaskIds","newDestinationColumn","children","className","map","columnId","column","taskId","fileName","_jsxFileName","lineNumber","columnNumber","provided","snapshot","ref","innerRef","droppableProps","isDraggingOver","task","draggableProps","dragHandleProps","isDragging","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/leesa/Desktop/OSSP-vivace/tempo/client/src/components/MainSect/Kanban.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport \"./kanban.css\";\r\n\r\ntype TaskType = {\r\n    id: string;\r\n    content: string;\r\n};\r\n\r\ntype ColumnType = {\r\n    id: string;\r\n    title: string;\r\n    taskIds: string[];\r\n};\r\n\r\ntype InitialDataType = {\r\n    tasks: { [key: string]: TaskType };\r\n    columns: { [key: string]: ColumnType };\r\n    columnOrder: string[];\r\n};\r\n\r\nconst initialData: InitialDataType = {\r\n    tasks: {\r\n        \"task-1\": { id: \"task-1\", content: \"Task 1\" },\r\n        \"task-2\": { id: \"task-2\", content: \"Task 2\" },\r\n        \"task-3\": { id: \"task-3\", content: \"Task 3\" },\r\n        \"task-4\": { id: \"task-4\", content: \"Task 4\" },\r\n    },\r\n    columns: {\r\n        \"column-1\": {\r\n            id: \"column-1\",\r\n            title: \"To do\",\r\n            taskIds: [\"task-1\", \"task-2\", \"task-3\", \"task-4\"],\r\n        },\r\n        \"column-2\": {\r\n            id: \"column-2\",\r\n            title: \"In progress\",\r\n            taskIds: [],\r\n        },\r\n        \"column-3\": {\r\n            id: \"column-3\",\r\n            title: \"Done\",\r\n            taskIds: [],\r\n        },\r\n    },\r\n    columnOrder: [\"column-1\", \"column-2\", \"column-3\"],\r\n};\r\n\r\nconst KanbanBoard: React.FC = () => {\r\n    const [data, setData] = useState(initialData);\r\n\r\n    const onDragEnd = (result: any) => {\r\n        const { destination, source, draggableId } = result;\r\n\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) {\r\n            return;\r\n        }\r\n\r\n        const sourceColumn = data.columns[source.droppableId];\r\n        const destinationColumn = data.columns[destination.droppableId];\r\n\r\n        if (sourceColumn === destinationColumn) {\r\n            const newTaskIds = Array.from(sourceColumn.taskIds);\r\n            newTaskIds.splice(source.index, 1);\r\n            newTaskIds.splice(destination.index, 0, draggableId);\r\n\r\n            const newColumn = {\r\n                ...sourceColumn,\r\n                taskIds: newTaskIds,\r\n            };\r\n\r\n            const newData = {\r\n                ...data,\r\n                columns: {\r\n                    ...data.columns,\r\n                    [newColumn.id]: newColumn,\r\n                },\r\n            };\r\n\r\n            setData(newData);\r\n        } else {\r\n            const sourceTaskIds = Array.from(sourceColumn.taskIds);\r\n            sourceTaskIds.splice(source.index, 1);\r\n            const newSourceColumn = {\r\n                ...sourceColumn,\r\n                taskIds: sourceTaskIds,\r\n            };\r\n\r\n            const destinationTaskIds = Array.from(destinationColumn.taskIds);\r\n            destinationTaskIds.splice(destination.index, 0, draggableId);\r\n            const newDestinationColumn = {\r\n                ...destinationColumn,\r\n\r\n                taskIds: destinationTaskIds,\r\n            };\r\n\r\n            const newData = {\r\n                ...data,\r\n                columns: {\r\n                    ...data.columns,\r\n                    [newSourceColumn.id]: newSourceColumn,\r\n                    [newDestinationColumn.id]: newDestinationColumn,\r\n                },\r\n            };\r\n\r\n            setData(newData);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n            <div className=\"board\">\r\n                {data.columnOrder.map((columnId) => {\r\n                    const column = data.columns[columnId];\r\n                    const tasks = column.taskIds.map((taskId) => data.tasks[taskId]);\r\n\r\n                    return (\r\n                        <div key={column.id} className=\"column\">\r\n                            <h3>{column.title}</h3>\r\n                            <Droppable droppableId={column.id}>\r\n                                {(provided, snapshot) => (\r\n                                    <div\r\n                                        ref={provided.innerRef}\r\n                                        {...provided.droppableProps}\r\n                                        className={`task-list ${snapshot.isDraggingOver ? \"dragging-over\" : \"\"}`}\r\n                                    >\r\n                                        {tasks.map((task, index) => (\r\n                                            <Draggable key={task.id} draggableId={task.id} index={index}>\r\n                                                {(provided, snapshot) => (\r\n                                                    <div\r\n                                                        ref={provided.innerRef}\r\n                                                        {...provided.draggableProps}\r\n                                                        {...provided.dragHandleProps}\r\n                                                        className={`task ${snapshot.isDragging ? \"dragging\" : \"\"}`}\r\n                                                    >\r\n                                                        {task.content}\r\n                                                    </div>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        ))}\r\n                                        {provided.placeholder}\r\n                                    </div>\r\n                                )}\r\n                            </Droppable>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </DragDropContext>\r\n    );\r\n};\r\n\r\nexport default KanbanBoard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}