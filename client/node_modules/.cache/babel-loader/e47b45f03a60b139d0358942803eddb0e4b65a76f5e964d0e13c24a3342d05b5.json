{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leesa\\\\Desktop\\\\OSSP-vivace\\\\tempo\\\\client\\\\src\\\\components\\\\MainSect\\\\Graph.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport { DataSet } from \"vis-data\";\nimport { Network } from \"vis-network\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NetworkComponent(props) {\n  _s();\n  const {\n    data\n  } = props;\n  const [nodeDataSet, setNodeDataSet] = useState(new DataSet([]));\n  const [edgeDataSet, setEdgeDataSet] = useState(new DataSet([]));\n  const containerRef = useRef(null);\n  useEffect(() => {\n    // Load node data from database and update nodeDataSet\n    const nodes = data.nodes;\n    setNodeDataSet(new DataSet(nodes));\n\n    // Load edge data from database and update edgeDataSet\n    const edges = data.edges;\n    setEdgeDataSet(new DataSet(edges));\n  }, [data]);\n  useEffect(() => {\n    if (containerRef.current) {\n      const network = new Network(containerRef.current, {\n        nodes: nodeDataSet,\n        edges: edgeDataSet\n      }, options);\n    }\n  }, [nodeDataSet, edgeDataSet]);\n  const options = {\n    nodes: {\n      shape: \"box\",\n      color: \"#ffffff\",\n      font: {\n        size: 14\n      }\n    },\n    edges: {\n      color: \"#cccccc\"\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      height: \"600px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 12\n  }, this);\n}\n_s(NetworkComponent, \"XKejSH7WeUSsUKkW85lH6eJSJ/E=\");\n_c = NetworkComponent;\nexport default NetworkComponent;\nvar _c;\n$RefreshReg$(_c, \"NetworkComponent\");","map":{"version":3,"names":["useEffect","useRef","useState","DataSet","Network","jsxDEV","_jsxDEV","NetworkComponent","props","_s","data","nodeDataSet","setNodeDataSet","edgeDataSet","setEdgeDataSet","containerRef","nodes","edges","current","network","options","shape","color","font","size","ref","style","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/leesa/Desktop/OSSP-vivace/tempo/client/src/components/MainSect/Graph.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport { DataSet } from \"vis-data\";\r\nimport { Network, Options } from \"vis-network\";\r\n\r\ninterface NodeData {\r\n    id: string;\r\n    label: string;\r\n    description: string;\r\n    image: string;\r\n    button1: () => void;\r\n    button2: () => void;\r\n}\r\n\r\ninterface EdgeData {\r\n    id: string;\r\n    from: string;\r\n    to: string;\r\n}\r\n\r\ninterface NetworkData {\r\n    nodes: NodeData[];\r\n    edges: EdgeData[];\r\n}\r\n\r\ninterface NetworkProps {\r\n    data: NetworkData;\r\n}\r\n\r\nfunction NetworkComponent(props: NetworkProps) {\r\n    const { data } = props;\r\n\r\n    const [nodeDataSet, setNodeDataSet] = useState(new DataSet<NodeData>([]));\r\n    const [edgeDataSet, setEdgeDataSet] = useState(new DataSet<EdgeData>([]));\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n    useEffect(() => {\r\n        // Load node data from database and update nodeDataSet\r\n        const nodes = data.nodes;\r\n        setNodeDataSet(new DataSet<NodeData>(nodes));\r\n\r\n        // Load edge data from database and update edgeDataSet\r\n        const edges = data.edges;\r\n        setEdgeDataSet(new DataSet<EdgeData>(edges));\r\n    }, [data]);\r\n\r\n    useEffect(() => {\r\n        if (containerRef.current) {\r\n            const network = new Network(containerRef.current, { nodes: nodeDataSet, edges: edgeDataSet }, options);\r\n        }\r\n    }, [nodeDataSet, edgeDataSet]);\r\n\r\n    const options: Options = {\r\n        nodes: {\r\n            shape: \"box\",\r\n            color: \"#ffffff\",\r\n            font: {\r\n                size: 14,\r\n            },\r\n        },\r\n        edges: {\r\n            color: \"#cccccc\",\r\n        },\r\n    };\r\n\r\n    return <div ref={containerRef} style={{ height: \"600px\" }} />;\r\n}\r\n\r\nexport default NetworkComponent;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,SAASC,OAAO,QAAQ,UAAU;AAClC,SAASC,OAAO,QAAiB,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AA0B/C,SAASC,gBAAgBA,CAACC,KAAmB,EAAE;EAAAC,EAAA;EAC3C,MAAM;IAAEC;EAAK,CAAC,GAAGF,KAAK;EAEtB,MAAM,CAACG,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,IAAIC,OAAO,CAAW,EAAE,CAAC,CAAC;EACzE,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,IAAIC,OAAO,CAAW,EAAE,CAAC,CAAC;EACzE,MAAMY,YAAY,GAAGd,MAAM,CAAiB,IAAI,CAAC;EAEjDD,SAAS,CAAC,MAAM;IACZ;IACA,MAAMgB,KAAK,GAAGN,IAAI,CAACM,KAAK;IACxBJ,cAAc,CAAC,IAAIT,OAAO,CAAWa,KAAK,CAAC,CAAC;;IAE5C;IACA,MAAMC,KAAK,GAAGP,IAAI,CAACO,KAAK;IACxBH,cAAc,CAAC,IAAIX,OAAO,CAAWc,KAAK,CAAC,CAAC;EAChD,CAAC,EAAE,CAACP,IAAI,CAAC,CAAC;EAEVV,SAAS,CAAC,MAAM;IACZ,IAAIe,YAAY,CAACG,OAAO,EAAE;MACtB,MAAMC,OAAO,GAAG,IAAIf,OAAO,CAACW,YAAY,CAACG,OAAO,EAAE;QAAEF,KAAK,EAAEL,WAAW;QAAEM,KAAK,EAAEJ;MAAY,CAAC,EAAEO,OAAO,CAAC;IAC1G;EACJ,CAAC,EAAE,CAACT,WAAW,EAAEE,WAAW,CAAC,CAAC;EAE9B,MAAMO,OAAgB,GAAG;IACrBJ,KAAK,EAAE;MACHK,KAAK,EAAE,KAAK;MACZC,KAAK,EAAE,SAAS;MAChBC,IAAI,EAAE;QACFC,IAAI,EAAE;MACV;IACJ,CAAC;IACDP,KAAK,EAAE;MACHK,KAAK,EAAE;IACX;EACJ,CAAC;EAED,oBAAOhB,OAAA;IAAKmB,GAAG,EAAEV,YAAa;IAACW,KAAK,EAAE;MAAEC,MAAM,EAAE;IAAQ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACjE;AAACtB,EAAA,CArCQF,gBAAgB;AAAAyB,EAAA,GAAhBzB,gBAAgB;AAuCzB,eAAeA,gBAAgB;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}