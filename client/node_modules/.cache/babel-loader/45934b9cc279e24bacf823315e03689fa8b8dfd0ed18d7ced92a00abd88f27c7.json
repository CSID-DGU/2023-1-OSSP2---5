{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leesa\\\\Desktop\\\\OSSP-vivace\\\\tempo\\\\client\\\\src\\\\components\\\\Main\\\\Kanban.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport BorderColorIcon from \"@mui/icons-material/BorderColor\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport \"./Kanban.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialColumns = [{\n  id: \"column-1\",\n  title: \"column 1\",\n  tasks: [\"task-1\", \"task-2\", \"task-3\"]\n}, {\n  id: \"column-2\",\n  title: \"column 2\",\n  tasks: [\"task-4\", \"task-5\"]\n}];\nconst initialTasks = {\n  \"task-1\": {\n    id: \"task-1\",\n    content: \"작업 1\"\n  },\n  \"task-2\": {\n    id: \"task-2\",\n    content: \"작업 2\"\n  },\n  \"task-3\": {\n    id: \"task-3\",\n    content: \"작업 3\"\n  },\n  \"task-4\": {\n    id: \"task-4\",\n    content: \"작업 4\"\n  },\n  \"task-5\": {\n    id: \"task-5\",\n    content: \"작업 5\"\n  }\n};\nconst EmptyColumnDropZone = () => {\n  return /*#__PURE__*/_jsxDEV(Droppable, {\n    droppableId: \"empty-column-drop-zone\",\n    type: \"task\",\n    children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"empty-column-drop-zone\",\n      ref: provided.innerRef,\n      ...provided.droppableProps,\n      children: provided.placeholder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n_c = EmptyColumnDropZone;\nconst Kanban = () => {\n  _s();\n  const [columns, setColumns] = useState(initialColumns);\n  const [tasks, setTasks] = useState(initialTasks);\n  const handleDragEnd = result => {\n    const {\n      source,\n      destination,\n      type\n    } = result;\n    if (!destination) {\n      return;\n    }\n    if (type === \"column\") {\n      const newColumns = Array.from(columns);\n      const [removed] = newColumns.splice(source.index, 1);\n      newColumns.splice(destination.index, 0, removed);\n      setColumns(newColumns);\n    } else if (type === \"task\") {\n      const sourceColumn = columns.find(col => col.id === source.droppableId);\n      const destinationColumn = columns.find(col => col.id === destination.droppableId);\n      if (sourceColumn && destinationColumn && sourceColumn === destinationColumn) {\n        const column = columns.find(col => col.id === source.droppableId);\n        if (column) {\n          const newTasks = Array.from(column.tasks);\n          const [removed] = newTasks.splice(source.index, 1);\n          newTasks.splice(destination.index, 0, removed);\n          const updatedColumns = columns.map(col => {\n            if (col.id === source.droppableId) {\n              return {\n                ...col,\n                tasks: newTasks\n              }; //column에 taskList 업데이트\n            }\n\n            return col;\n          });\n          setColumns(updatedColumns); //업데이트된 column으로 세팅\n        }\n      } else if (sourceColumn && destinationColumn && sourceColumn !== destinationColumn) {\n        const sourceTasks = Array.from(sourceColumn.tasks);\n        const destinationTasks = Array.from(destinationColumn.tasks);\n        const [removed] = sourceTasks.splice(source.index, 1);\n        destinationTasks.splice(destination.index, 0, removed);\n        const updatedColumns = columns.map(col => {\n          if (col.id === source.droppableId) {\n            return {\n              ...col,\n              tasks: sourceTasks\n            };\n          }\n          if (col.id === destination.droppableId) {\n            return {\n              ...col,\n              tasks: destinationTasks\n            };\n          }\n          return col;\n        });\n        setColumns(updatedColumns);\n      }\n    }\n  };\n  const addColumn = () => {\n    const newColumnId = `column-${columns.length + 1}`;\n    const newColumn = {\n      id: newColumnId,\n      title: `column ${columns.length + 1}`,\n      tasks: []\n    };\n    setColumns([...columns, newColumn]);\n  };\n  const updateColumnTitle = (columnId, newTitle) => {\n    const updatedColumns = columns.map(col => {\n      if (col.id === columnId) {\n        return {\n          ...col,\n          title: newTitle\n        };\n      }\n      return col;\n    });\n    setColumns(updatedColumns);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"kanban\",\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: handleDragEnd,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-container\",\n        children: /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"all-columns\",\n          direction: \"horizontal\",\n          type: \"column\",\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"column-container\",\n            ref: provided.innerRef,\n            ...provided.droppableProps,\n            children: [columns.map((column, columnIndex) => /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: column.id,\n              index: columnIndex,\n              children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"column\",\n                ref: provided.innerRef,\n                ...provided.draggableProps,\n                ...provided.dragHandleProps,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"column-header\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                    className: \"column-title\",\n                    children: column.title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 128,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"column-title-button\",\n                    onClick: () => {\n                      const newTitle = prompt(\"새로운 열 제목을 입력하세요:\");\n                      if (newTitle) {\n                        updateColumnTitle(column.id, newTitle);\n                      }\n                    },\n                    children: /*#__PURE__*/_jsxDEV(BorderColorIcon, {\n                      className: \"reName\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 138,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 129,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"task-count\",\n                    children: column.tasks.length\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 140,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 49\n                }, this), column.tasks.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyColumnDropZone, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 53\n                }, this) : /*#__PURE__*/_jsxDEV(Droppable, {\n                  droppableId: column.id,\n                  type: \"task\",\n                  children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"task-list\",\n                    ref: provided.innerRef,\n                    ...provided.droppableProps,\n                    children: [column.tasks.map((taskId, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n                      draggableId: taskId,\n                      index: index,\n                      children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"task\",\n                        ref: provided.innerRef,\n                        ...provided.draggableProps,\n                        ...provided.dragHandleProps,\n                        children: /*#__PURE__*/_jsxDEV(\"p\", {\n                          children: tasks[taskId].content\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 165,\n                          columnNumber: 81\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 159,\n                        columnNumber: 77\n                      }, this)\n                    }, taskId, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 153,\n                      columnNumber: 69\n                    }, this)), provided.placeholder]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 147,\n                    columnNumber: 61\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 45\n              }, this)\n            }, column.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 37\n            }, this)), provided.placeholder, /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"add-column-button-container\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"add-column-button\",\n                onClick: addColumn,\n                children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n};\n_s(Kanban, \"R5b/ZdhZGD82TPodfVYYdaDf5Ss=\");\n_c2 = Kanban;\nexport default Kanban;\nvar _c, _c2;\n$RefreshReg$(_c, \"EmptyColumnDropZone\");\n$RefreshReg$(_c2, \"Kanban\");","map":{"version":3,"names":["React","useState","DragDropContext","Droppable","Draggable","BorderColorIcon","AddIcon","jsxDEV","_jsxDEV","initialColumns","id","title","tasks","initialTasks","content","EmptyColumnDropZone","droppableId","type","children","provided","className","ref","innerRef","droppableProps","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","Kanban","_s","columns","setColumns","setTasks","handleDragEnd","result","source","destination","newColumns","Array","from","removed","splice","index","sourceColumn","find","col","destinationColumn","column","newTasks","updatedColumns","map","sourceTasks","destinationTasks","addColumn","newColumnId","length","newColumn","updateColumnTitle","columnId","newTitle","onDragEnd","direction","columnIndex","draggableId","draggableProps","dragHandleProps","onClick","prompt","taskId","_c2","$RefreshReg$"],"sources":["C:/Users/leesa/Desktop/OSSP-vivace/tempo/client/src/components/Main/Kanban.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable, DropResult } from \"react-beautiful-dnd\";\r\nimport BorderColorIcon from \"@mui/icons-material/BorderColor\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport \"./Kanban.css\";\r\n\r\nconst initialColumns = [\r\n    { id: \"column-1\", title: \"column 1\", tasks: [\"task-1\", \"task-2\", \"task-3\"] },\r\n    { id: \"column-2\", title: \"column 2\", tasks: [\"task-4\", \"task-5\"] },\r\n];\r\n\r\nconst initialTasks: { [key: string]: { id: string; content: string } } = {\r\n    \"task-1\": { id: \"task-1\", content: \"작업 1\" },\r\n    \"task-2\": { id: \"task-2\", content: \"작업 2\" },\r\n    \"task-3\": { id: \"task-3\", content: \"작업 3\" },\r\n    \"task-4\": { id: \"task-4\", content: \"작업 4\" },\r\n    \"task-5\": { id: \"task-5\", content: \"작업 5\" },\r\n};\r\n\r\nconst EmptyColumnDropZone: React.FC = () => {\r\n    return (\r\n        <Droppable droppableId=\"empty-column-drop-zone\" type=\"task\">\r\n            {(provided) => (\r\n                <div className=\"empty-column-drop-zone\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                    {provided.placeholder}\r\n                </div>\r\n            )}\r\n        </Droppable>\r\n    );\r\n};\r\n\r\nconst Kanban: React.FC = () => {\r\n    const [columns, setColumns] = useState(initialColumns);\r\n    const [tasks, setTasks] = useState(initialTasks);\r\n\r\n    const handleDragEnd = (result: DropResult) => {\r\n        const { source, destination, type } = result;\r\n\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (type === \"column\") {\r\n            const newColumns = Array.from(columns);\r\n            const [removed] = newColumns.splice(source.index, 1);\r\n            newColumns.splice(destination.index, 0, removed);\r\n            setColumns(newColumns);\r\n        } else if (type === \"task\") {\r\n            const sourceColumn = columns.find((col) => col.id === source.droppableId);\r\n            const destinationColumn = columns.find((col) => col.id === destination.droppableId);\r\n\r\n            if (sourceColumn && destinationColumn && sourceColumn === destinationColumn) {\r\n                const column = columns.find((col) => col.id === source.droppableId);\r\n                if (column) {\r\n                    const newTasks = Array.from(column.tasks);\r\n                    const [removed] = newTasks.splice(source.index, 1);\r\n                    newTasks.splice(destination.index, 0, removed);\r\n\r\n                    const updatedColumns = columns.map((col) => {\r\n                        if (col.id === source.droppableId) {\r\n                            return { ...col, tasks: newTasks }; //column에 taskList 업데이트\r\n                        }\r\n                        return col;\r\n                    });\r\n\r\n                    setColumns(updatedColumns); //업데이트된 column으로 세팅\r\n                }\r\n            } else if (sourceColumn && destinationColumn && sourceColumn !== destinationColumn) {\r\n                const sourceTasks = Array.from(sourceColumn.tasks);\r\n                const destinationTasks = Array.from(destinationColumn.tasks);\r\n                const [removed] = sourceTasks.splice(source.index, 1);\r\n                destinationTasks.splice(destination.index, 0, removed);\r\n\r\n                const updatedColumns = columns.map((col) => {\r\n                    if (col.id === source.droppableId) {\r\n                        return { ...col, tasks: sourceTasks };\r\n                    }\r\n                    if (col.id === destination.droppableId) {\r\n                        return { ...col, tasks: destinationTasks };\r\n                    }\r\n                    return col;\r\n                });\r\n\r\n                setColumns(updatedColumns);\r\n            }\r\n        }\r\n    };\r\n\r\n    const addColumn = () => {\r\n        const newColumnId = `column-${columns.length + 1}`;\r\n        const newColumn = {\r\n            id: newColumnId,\r\n            title: `column ${columns.length + 1}`,\r\n            tasks: [],\r\n        };\r\n\r\n        setColumns([...columns, newColumn]);\r\n    };\r\n\r\n    const updateColumnTitle = (columnId: string, newTitle: string) => {\r\n        const updatedColumns = columns.map((col) => {\r\n            if (col.id === columnId) {\r\n                return { ...col, title: newTitle };\r\n            }\r\n            return col;\r\n        });\r\n\r\n        setColumns(updatedColumns);\r\n    };\r\n\r\n    return (\r\n        <div className=\"kanban\">\r\n            <DragDropContext onDragEnd={handleDragEnd}>\r\n                <div className=\"column-container\">\r\n                    <Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"column\">\r\n                        {(provided) => (\r\n                            <div className=\"column-container\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                                {columns.map((column, columnIndex) => (\r\n                                    <Draggable draggableId={column.id} index={columnIndex} key={column.id}>\r\n                                        {(provided) => (\r\n                                            <div\r\n                                                className=\"column\"\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.draggableProps}\r\n                                                {...provided.dragHandleProps}\r\n                                            >\r\n                                                <div className=\"column-header\">\r\n                                                    <h2 className=\"column-title\">{column.title}</h2>\r\n                                                    <button\r\n                                                        className=\"column-title-button\"\r\n                                                        onClick={() => {\r\n                                                            const newTitle = prompt(\"새로운 열 제목을 입력하세요:\");\r\n                                                            if (newTitle) {\r\n                                                                updateColumnTitle(column.id, newTitle);\r\n                                                            }\r\n                                                        }}\r\n                                                    >\r\n                                                        <BorderColorIcon className=\"reName\" />\r\n                                                    </button>\r\n                                                    <span className=\"task-count\">{column.tasks.length}</span>\r\n                                                </div>\r\n                                                {column.tasks.length === 0 ? (\r\n                                                    <EmptyColumnDropZone />\r\n                                                ) : (\r\n                                                    <Droppable droppableId={column.id} type=\"task\">\r\n                                                        {(provided) => (\r\n                                                            <div\r\n                                                                className=\"task-list\"\r\n                                                                ref={provided.innerRef}\r\n                                                                {...provided.droppableProps}\r\n                                                            >\r\n                                                                {column.tasks.map((taskId, index) => (\r\n                                                                    <Draggable\r\n                                                                        draggableId={taskId}\r\n                                                                        index={index}\r\n                                                                        key={taskId}\r\n                                                                    >\r\n                                                                        {(provided) => (\r\n                                                                            <div\r\n                                                                                className=\"task\"\r\n                                                                                ref={provided.innerRef}\r\n                                                                                {...provided.draggableProps}\r\n                                                                                {...provided.dragHandleProps}\r\n                                                                            >\r\n                                                                                <p>{tasks[taskId].content}</p>\r\n                                                                            </div>\r\n                                                                        )}\r\n                                                                    </Draggable>\r\n                                                                ))}\r\n                                                                {provided.placeholder}\r\n                                                            </div>\r\n                                                        )}\r\n                                                    </Droppable>\r\n                                                )}\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                ))}\r\n                                {provided.placeholder}\r\n                                <div className=\"add-column-button-container\">\r\n                                    <button className=\"add-column-button\" onClick={addColumn}>\r\n                                        <AddIcon />\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </div>\r\n            </DragDropContext>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Kanban;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}