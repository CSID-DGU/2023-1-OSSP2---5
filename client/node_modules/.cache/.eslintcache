[{"C:\\Users\\leesa\\Desktop\\OSSP-vivace\\tempo\\client\\src\\index.tsx":"1","C:\\Users\\leesa\\Desktop\\OSSP-vivace\\tempo\\client\\src\\App.tsx":"2","C:\\Users\\leesa\\Desktop\\OSSP-vivace\\tempo\\client\\src\\pages\\MainPage.tsx":"3","C:\\Users\\leesa\\Desktop\\OSSP-vivace\\tempo\\client\\src\\pages\\AddProject.tsx":"4","C:\\Users\\leesa\\Desktop\\OSSP-vivace\\tempo\\client\\src\\reportWebVitals.ts":"5","C:\\Users\\leesa\\Desktop\\OSSP-vivace\\tempo\\client\\src\\components\\MainSect\\MainSect.tsx":"6","C:\\Users\\leesa\\Desktop\\OSSP-vivace\\tempo\\client\\src\\components\\LSideBar\\LSideBar.tsx":"7","C:\\Users\\leesa\\Desktop\\OSSP-vivace\\tempo\\client\\src\\components\\Main\\Network.tsx":"8","C:\\Users\\leesa\\Desktop\\OSSP-vivace\\tempo\\client\\src\\components\\Main\\TaskList.tsx":"9","C:\\Users\\leesa\\Desktop\\OSSP-vivace\\tempo\\client\\src\\components\\Main\\Kanban.tsx":"10","C:\\Users\\leesa\\Desktop\\OSSP-vivace\\tempo\\client\\src\\components\\RSideBar\\RSideBar.tsx":"11","C:\\Users\\leesa\\Desktop\\OSSP-vivace\\tempo\\client\\src\\components\\Main\\MarkDown.tsx":"12"},{"size":323,"mtime":1684134960261,"results":"13","hashOfConfig":"14"},{"size":230,"mtime":1683704283429,"results":"15","hashOfConfig":"14"},{"size":1076,"mtime":1684678147804,"results":"16","hashOfConfig":"14"},{"size":1397,"mtime":1683486361717,"results":"17","hashOfConfig":"14"},{"size":440,"mtime":1683480525205,"results":"18","hashOfConfig":"14"},{"size":1336,"mtime":1684850600403,"results":"19","hashOfConfig":"14"},{"size":2378,"mtime":1684783876720,"results":"20","hashOfConfig":"14"},{"size":7321,"mtime":1684684906850,"results":"21","hashOfConfig":"14"},{"size":3100,"mtime":1684466514415,"results":"22","hashOfConfig":"14"},{"size":9364,"mtime":1684824249365,"results":"23","hashOfConfig":"14"},{"size":12541,"mtime":1684855777869,"results":"24","hashOfConfig":"14"},{"size":1198,"mtime":1684699312720,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},"owooaa",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"30"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\leesa\\Desktop\\OSSP-vivace\\tempo\\client\\src\\index.tsx",["66"],[],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\"),\r\n);\r\n\r\nconst MainApp: React.FC = () => {\r\n    return null;\r\n};\r\n\r\nexport default App;\r\n",[],"C:\\Users\\leesa\\Desktop\\OSSP-vivace\\tempo\\client\\src\\App.tsx",[],[],"C:\\Users\\leesa\\Desktop\\OSSP-vivace\\tempo\\client\\src\\pages\\MainPage.tsx",[],[],"C:\\Users\\leesa\\Desktop\\OSSP-vivace\\tempo\\client\\src\\pages\\AddProject.tsx",[],[],"C:\\Users\\leesa\\Desktop\\OSSP-vivace\\tempo\\client\\src\\reportWebVitals.ts",[],[],"C:\\Users\\leesa\\Desktop\\OSSP-vivace\\tempo\\client\\src\\components\\MainSect\\MainSect.tsx",["67","68","69"],[],"C:\\Users\\leesa\\Desktop\\OSSP-vivace\\tempo\\client\\src\\components\\LSideBar\\LSideBar.tsx",["70"],[],"import React, { useState } from \"react\";\r\nimport AccountCircleIcon from \"@mui/icons-material/AccountCircle\";\r\nimport \"./LSideBar.css\";\r\n\r\ninterface Project {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\ninterface User {\r\n    name: string;\r\n    email: string;\r\n    profileImage: string;\r\n}\r\n\r\nconst LSidebar: React.FC = () => {\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n    const [isSidebarOpen, setIsSidebarOpen] = useState(true);\r\n\r\n    const user: User = {\r\n        name: \"John Doe\",\r\n        email: \"johndoe@example.com\",\r\n        profileImage: \"path/to/profile/image.jpg\",\r\n    };\r\n\r\n    const projects: Project[] = [\r\n        { id: 1, name: \"Project 1\" },\r\n        { id: 2, name: \"Project 2\" },\r\n        { id: 3, name: \"Project 3\" },\r\n    ];\r\n\r\n    const filteredProjects = projects.filter((project) =>\r\n        project.name.toLowerCase().includes(searchTerm.toLowerCase()),\r\n    );\r\n\r\n    const handleToggleSidebar = () => {\r\n        setIsSidebarOpen((prevState) => !prevState);\r\n    };\r\n\r\n    return (\r\n        <div className={`sidebar ${isSidebarOpen ? \"\" : \"closed\"}`}>\r\n            <div className=\"content\">\r\n                <div className=\"profile\">\r\n                    <div className=\"profileImageContainer\">\r\n                        <AccountCircleIcon sx={{ fontSize: 40 }} />\r\n                    </div>\r\n\r\n                    <div className=\"userInfo\">\r\n                        <div className=\"userName\">\r\n                            {user.name}\r\n                            <br />\r\n                            <div className=\"userEmail\">{user.email}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"프로젝트 검색\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                />\r\n                <ul className=\"project-list\">\r\n                    {filteredProjects.map((project) => (\r\n                        <li key={project.id} onClick={() => console.log(project.id)}>\r\n                            {project.name}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n                <button className=\"add-project-button\">Add Project</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LSidebar;\r\n","C:\\Users\\leesa\\Desktop\\OSSP-vivace\\tempo\\client\\src\\components\\Main\\Network.tsx",[],[],"C:\\Users\\leesa\\Desktop\\OSSP-vivace\\tempo\\client\\src\\components\\Main\\TaskList.tsx",[],[],"C:\\Users\\leesa\\Desktop\\OSSP-vivace\\tempo\\client\\src\\components\\Main\\Kanban.tsx",["71"],[],"import React, { useState } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable, DropResult } from \"react-beautiful-dnd\";\r\nimport BorderColorIcon from \"@mui/icons-material/BorderColor\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport \"./Kanban.css\";\r\n\r\nconst initialColumns = [\r\n    { id: \"column-1\", title: \"column 1\", tasks: [\"task-1\", \"task-2\", \"task-3\"] },\r\n    { id: \"column-2\", title: \"column 2\", tasks: [\"task-4\", \"task-5\"] },\r\n];\r\n\r\nconst initialTasks: { [key: string]: { id: string; content: string } } = {\r\n    \"task-1\": { id: \"task-1\", content: \"작업 1\" },\r\n    \"task-2\": { id: \"task-2\", content: \"작업 2\" },\r\n    \"task-3\": { id: \"task-3\", content: \"작업 3\" },\r\n    \"task-4\": { id: \"task-4\", content: \"작업 4\" },\r\n    \"task-5\": { id: \"task-5\", content: \"작업 5\" },\r\n};\r\n\r\nconst Kanban: React.FC = () => {\r\n    const [columns, setColumns] = useState(initialColumns);\r\n    const [tasks, setTasks] = useState(initialTasks);\r\n\r\n    const handleDragEnd = (result: DropResult) => {\r\n        const { source, destination, type } = result;\r\n\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (type === \"column\") {\r\n            const newColumns = Array.from(columns);\r\n            const [removed] = newColumns.splice(source.index, 1);\r\n            newColumns.splice(destination.index, 0, removed);\r\n            setColumns(newColumns);\r\n        } else if (type === \"task\") {\r\n            const sourceColumn = columns.find((col) => col.id === source.droppableId);\r\n            const destinationColumn = columns.find((col) => col.id === destination.droppableId);\r\n\r\n            if (sourceColumn && destinationColumn && sourceColumn === destinationColumn) {\r\n                const column = columns.find((col) => col.id === source.droppableId);\r\n                if (column) {\r\n                    const newTasks = Array.from(column.tasks);\r\n                    const [removed] = newTasks.splice(source.index, 1);\r\n                    newTasks.splice(destination.index, 0, removed);\r\n\r\n                    const updatedColumns = columns.map((col) => {\r\n                        if (col.id === source.droppableId) {\r\n                            return { ...col, tasks: newTasks }; //column에 taskList 업데이트\r\n                        }\r\n                        return col;\r\n                    });\r\n\r\n                    setColumns(updatedColumns); //업데이트된 column으로 세팅\r\n                }\r\n            } else if (sourceColumn && destinationColumn && sourceColumn !== destinationColumn) {\r\n                const sourceTasks = Array.from(sourceColumn.tasks);\r\n                const destinationTasks = Array.from(destinationColumn.tasks);\r\n                const [removed] = sourceTasks.splice(source.index, 1);\r\n                destinationTasks.splice(destination.index, 0, removed);\r\n\r\n                const updatedColumns = columns.map((col) => {\r\n                    if (col.id === source.droppableId) {\r\n                        return { ...col, tasks: sourceTasks };\r\n                    }\r\n                    if (col.id === destination.droppableId) {\r\n                        return { ...col, tasks: destinationTasks };\r\n                    }\r\n                    return col;\r\n                });\r\n\r\n                setColumns(updatedColumns);\r\n            }\r\n        }\r\n    };\r\n\r\n    const addColumn = () => {\r\n        const newColumnId = `column-${columns.length + 1}`;\r\n        const newColumn = {\r\n            id: newColumnId,\r\n            title: `column ${columns.length + 1}`,\r\n            tasks: [],\r\n        };\r\n\r\n        setColumns([...columns, newColumn]);\r\n    };\r\n\r\n    const updateColumnTitle = (columnId: string, newTitle: string) => {\r\n        const updatedColumns = columns.map((col) => {\r\n            if (col.id === columnId) {\r\n                return { ...col, title: newTitle };\r\n            }\r\n            return col;\r\n        });\r\n\r\n        setColumns(updatedColumns);\r\n    };\r\n\r\n    return (\r\n        <div className=\"kanban\">\r\n            <DragDropContext onDragEnd={handleDragEnd}>\r\n                <div className=\"column-container\">\r\n                    <Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"column\">\r\n                        {(provided) => (\r\n                            <div className=\"column-container\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                                {columns.map((column, columnIndex) => (\r\n                                    <Draggable draggableId={column.id} index={columnIndex} key={column.id}>\r\n                                        {(provided) => (\r\n                                            <div\r\n                                                className=\"column\"\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.draggableProps}\r\n                                                {...provided.dragHandleProps}\r\n                                            >\r\n                                                <div className=\"column-header\">\r\n                                                    <h2 className=\"column-title\">{column.title}</h2>\r\n                                                    <button\r\n                                                        className=\"column-title-button\"\r\n                                                        onClick={() => {\r\n                                                            const newTitle = prompt(\"새로운 열 제목을 입력하세요:\");\r\n                                                            if (newTitle) {\r\n                                                                updateColumnTitle(column.id, newTitle);\r\n                                                            }\r\n                                                        }}\r\n                                                    >\r\n                                                        <BorderColorIcon className=\"reName\" />\r\n                                                    </button>\r\n                                                    <span className=\"task-count\">{column.tasks.length}</span>\r\n                                                </div>\r\n                                                <Droppable droppableId={column.id} type=\"task\">\r\n                                                    {(provided) => (\r\n                                                        <div\r\n                                                            className=\"task-list\"\r\n                                                            ref={provided.innerRef}\r\n                                                            {...provided.droppableProps}\r\n                                                        >\r\n                                                            {column.tasks.map((taskId, index) => (\r\n                                                                <Draggable\r\n                                                                    draggableId={taskId}\r\n                                                                    index={index}\r\n                                                                    key={taskId}\r\n                                                                >\r\n                                                                    {(provided) => (\r\n                                                                        <div\r\n                                                                            className=\"task\"\r\n                                                                            ref={provided.innerRef}\r\n                                                                            {...provided.draggableProps}\r\n                                                                            {...provided.dragHandleProps}\r\n                                                                        >\r\n                                                                            <p>{tasks[taskId].content}</p>\r\n                                                                        </div>\r\n                                                                    )}\r\n                                                                </Draggable>\r\n                                                            ))}\r\n                                                            {provided.placeholder}\r\n                                                        </div>\r\n                                                    )}\r\n                                                </Droppable>\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                ))}\r\n                                {provided.placeholder}\r\n                                <div className=\"add-column-button-container\">\r\n                                    <button className=\"add-column-button\" onClick={addColumn}>\r\n                                        <AddIcon />\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </div>\r\n            </DragDropContext>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Kanban;\r\n","C:\\Users\\leesa\\Desktop\\OSSP-vivace\\tempo\\client\\src\\components\\RSideBar\\RSideBar.tsx",[],[],"C:\\Users\\leesa\\Desktop\\OSSP-vivace\\tempo\\client\\src\\components\\Main\\MarkDown.tsx",[],[],{"ruleId":"72","severity":1,"message":"73","line":13,"column":7,"nodeType":"74","messageId":"75","endLine":13,"endColumn":24},{"ruleId":"72","severity":1,"message":"76","line":2,"column":8,"nodeType":"74","messageId":"75","endLine":2,"endColumn":15},{"ruleId":"72","severity":1,"message":"77","line":3,"column":8,"nodeType":"74","messageId":"75","endLine":3,"endColumn":16},{"ruleId":"72","severity":1,"message":"78","line":4,"column":8,"nodeType":"74","messageId":"75","endLine":4,"endColumn":16},{"ruleId":"72","severity":1,"message":"79","line":36,"column":11,"nodeType":"74","messageId":"75","endLine":36,"endColumn":30},{"ruleId":"72","severity":1,"message":"80","line":22,"column":19,"nodeType":"74","messageId":"75","endLine":22,"endColumn":27},"@typescript-eslint/no-unused-vars","'MainApp' is assigned a value but never used.","Identifier","unusedVar","'Network' is defined but never used.","'TaskList' is defined but never used.","'MarkDown' is defined but never used.","'handleToggleSidebar' is assigned a value but never used.","'setTasks' is assigned a value but never used."]